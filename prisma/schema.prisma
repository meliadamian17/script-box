datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserPreferences {
  id                  Int      @id @default(autoincrement())
  defaultLanguage     String   @default("python")
  defaultTheme        String   @default("dark")
  enableVim           Boolean  @default(false)
  relativeLineNumbers Boolean  @default(false)

  user                User     @relation(fields: [userId], references: [id])
  userId              Int      @unique
}

model User {
  id           Int             @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String           @unique
  password     String
  profileImage String?
  phoneNumber  String?
  role         String           @default("USER")
  refreshToken String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  preferences  UserPreferences?
  templates    Template[]
  blogPosts    BlogPost[]
  comments     Comment[]
  reports      Report[]
  ratings      CommentRating[] @relation("UserRatings")
  postRatings  BlogPostRating[]
}

model Template {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  code         String
  language     String
  tags         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  userId       Int

  forkedFrom   Template?  @relation("TemplateFork", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks        Template[] @relation("TemplateFork")

  blogPosts    BlogPost[] @relation("TemplateBlogPosts")
  comments     Comment[]  @relation("TemplateComments")
}

model BlogPost {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  content      String
  tags         String
  rating       Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  hidden       Boolean        @default(false)
  reported     Boolean	      @default(false)
  canEdit      Boolean        @default(true)

  author       User      @relation(fields: [authorId], references: [id])
  authorId     Int
  comments     Comment[]
  reports      Report[]
  templates    Template[] @relation("TemplateBlogPosts")
  ratings      BlogPostRating[]
}

model BlogPostRating {
  id         Int      @id @default(autoincrement())
  value      Int      
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  post       BlogPost @relation(fields: [postId], references: [id])
  postId     Int

  @@unique([userId, postId]) 
}

model Comment {
  id           Int            @id @default(autoincrement())
  content      String
  rating       Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  hidden       Boolean        @default(false)
  reported     Boolean	      @default(false)
  canEdit      Boolean        @default(true)
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  blogPost     BlogPost?      @relation(fields: [blogPostId], references: [id])
  blogPostId   Int?
  template     Template?      @relation("TemplateComments", fields: [templateId], references: [id])
  templateId   Int?
  
  report       Report?        @relation("CommentReport")

  ratings      CommentRating[] @relation("CommentRatings") 
}

model CommentRating {
  id        Int      @id @default(autoincrement())
  value     Int      // Use 1 for upvote and -1 for downvote
  createdAt DateTime @default(now())

  user      User     @relation("UserRatings", fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation("CommentRatings", fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
}

model Report {
  id           Int       @id @default(autoincrement())
  reason       String
  createdAt    DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  blogPost     BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId   Int?
  comment      Comment?  @relation("CommentReport", fields: [commentId], references: [id], onDelete: Cascade)
  commentId    Int? @unique
}

